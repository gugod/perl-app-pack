#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"App/PMUtils.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'APP_PMUTILS';
  package App::PMUtils;
  
  our $DATE = '2015-12-07'; # DATE
  our $VERSION = '0.53'; # VERSION
  
  use 5.010001;
  
  our $arg_module_multiple = {
      schema => ['array*' => of=>'str*', min_len=>1],
      req    => 1,
      pos    => 0,
      greedy => 1,
      element_completion => sub {
          require Complete::Module;
          my %args = @_;
          Complete::Module::complete_module(word=>$args{word});
      },
  };
  
  our $arg_module_single = {
      schema => 'str*',
      req    => 1,
      pos    => 0,
      completion => sub {
          require Complete::Module;
          my %args = @_;
          Complete::Module::complete_module(word=>$args{word});
      },
  };
  
  1;
  # ABSTRACT: Command-line utilities related to Perl modules
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  App::PMUtils - Command-line utilities related to Perl modules
  
  =head1 VERSION
  
  This document describes version 0.53 of App::PMUtils (from Perl distribution App-PMUtils), released on 2015-12-07.
  
  =head1 SYNOPSIS
  
  This distribution provides the following command-line utilities related to Perl
  modules:
  
  =over
  
  =item * L<pmbin>
  
  =item * L<pmcat>
  
  =item * L<pmchkver>
  
  =item * L<pmcore>
  
  =item * L<pmcost>
  
  =item * L<pmdoc>
  
  =item * L<pmedit>
  
  =item * L<pminfo>
  
  =item * L<pmless>
  
  =item * L<pmlines>
  
  =item * L<pmlist>
  
  =item * L<pmman>
  
  =item * L<pmpath>
  
  =item * L<pmstripper>
  
  =item * L<pmuninst>
  
  =item * L<pmversion>
  
  =item * L<pmxs>
  
  =item * L<podpath>
  
  =back
  
  The main purpose of these utilities is tab completion.
  
  =head1 FAQ
  
  =for BEGIN_BLOCK: faq
  
  =head2 What is the purpose of this distribution? Haven't other similar utilities existed?
  
  For example, L<mpath> from L<Module::Path> distribution is similar to L<pmpath>
  in L<App::PMUtils>, and L<mversion> from L<Module::Version> distribution is
  similar to L<pmversion> from L<App::PMUtils> distribution, and so on.
  
  True. The main point of these utilities is shell tab completion, to save
  typing.
  
  =for END_BLOCK: faq
  
  =head1 SEE ALSO
  
  =for BEGIN_BLOCK: see_also
  
  Below is the list of distributions that provide CLI utilities for various
  purposes, with the focus on providing shell tab completion feature.
  
  L<App::DistUtils>, utilities related to Perl distributions.
  
  L<App::DzilUtils>, utilities related to L<Dist::Zilla>.
  
  L<App::GitUtils>, utilities related to git.
  
  L<App::IODUtils>, utilities related to L<IOD> configuration files.
  
  L<App::LedgerUtils>, utilities related to Ledger CLI files.
  
  L<App::PlUtils>, utilities related to Perl scripts.
  
  L<App::PMUtils>, utilities related to Perl modules.
  
  L<App::ProgUtils>, utilities related to programs.
  
  L<App::WeaverUtils>, utilities related to L<Pod::Weaver>.
  
  =for END_BLOCK: see_also
  
  =head1 HOMEPAGE
  
  Please visit the project's homepage at L<https://metacpan.org/release/App-PMUtils>.
  
  =head1 SOURCE
  
  Source repository is at L<https://github.com/sharyanto/perl-App-PMUtils>.
  
  =head1 BUGS
  
  Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-PMUtils>
  
  When submitting a bug or request, please include a test-file or a
  patch to an existing test-file that illustrates the bug or desired
  feature.
  
  =head1 AUTHOR
  
  perlancar <perlancar@cpan.org>
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2015 by perlancar@cpan.org.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
APP_PMUTILS

$fatpacked{"Perinci/CmdLine/Any.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'PERINCI_CMDLINE_ANY';
  package Perinci::CmdLine::Any;
  
  our $DATE = '2015-09-03'; # DATE
  our $VERSION = '0.12'; # VERSION
  
  use 5.010001;
  use strict;
  use warnings;
  
  my %Opts = (
      -prefer_lite => 1,
  );
  
  sub import {
      my ($class, %args) = @_;
      $Opts{$_} = $args{$_} for keys %args;
  }
  
  sub new {
      my $class = shift;
  
      my @mods;
      my $env = $ENV{PERINCI_CMDLINE_ANY};
      if ($env) {
          if ($env eq 'classic') {
              $env = 'Perinci::CmdLine::Classic';
          } elsif ($env eq 'lite') {
              $env = 'Perinci::CmdLine::Lite';
          }
          @mods = ($env);
      } elsif ($Opts{-prefer_lite}) {
          @mods = qw(Perinci::CmdLine::Lite Perinci::CmdLine::Classic);
      } else {
          @mods = qw(Perinci::CmdLine::Classic Perinci::CmdLine::Lite);
      }
  
      for my $i (1..@mods) {
          my $mod = $mods[$i-1];
          my $modpm = $mod; $modpm =~ s!::!/!g; $modpm .= ".pm";
          if ($i == @mods) {
              require $modpm;
              return $mod->new(@_);
          } else {
              my $res;
              eval {
                  require $modpm;
                  $res = $mod->new(@_);
              };
              if ($@) {
                  next;
              } else {
                  return $res;
              }
          }
      }
  }
  
  1;
  # ABSTRACT: Choose Perinci::CmdLine implementation (::Lite or ::Classic)
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  Perinci::CmdLine::Any - Choose Perinci::CmdLine implementation (::Lite or ::Classic)
  
  =head1 VERSION
  
  This document describes version 0.12 of Perinci::CmdLine::Any (from Perl distribution Perinci-CmdLine-Any), released on 2015-09-03.
  
  =head1 SYNOPSIS
  
  In your command-line script (this will pick ::Lite first):
  
   #!perl
   use Perinci::CmdLine::Any;
   Perinci::CmdLine::Any->new(url => '/Package/func')->run;
  
  In your command-line script (this will pick ::Classic first, and falls back to
  ::Lite):
  
   #!perl
   use Perinci::CmdLine::Any -prefer_lite=>0;
   Perinci::CmdLine::Any->new(url => '/Package/func')->run;
  
  =head1 DESCRIPTION
  
  This module lets you use L<Perinci::CmdLine::Lite> or
  L<Perinci::CmdLine::Classic>.
  
  If you want to force using a specific class, you can set the
  C<PERINCI_CMDLINE_ANY> environment variable, e.g. the command below will only
  try to use Perinci::CmdLine::Classic:
  
   % PERINCI_CMDLINE_ANY=Perinci::CmdLine::Classic yourapp.pl
   % PERINCI_CMDLINE_ANY=classic yourapp.pl
  
  If you want to prefer to Perinci::CmdLine::Classic (but user will still be able
  to override using C<PERINCI_CMDLINE_ANY>):
  
   use Perinci::CmdLine::Any -prefer_lite => 0;
  
  =for Pod::Coverage ^(new)$
  
  =head1 ENVIRONMENT
  
  =head2 PERINCI_CMDLINE_ANY => str
  
  Either specify module name, or C<lite> or C<classic>.
  
  =head1 SEE ALSO
  
  L<Perinci::CmdLine::Lite>, L<Perinci::CmdLine::Classic>
  
  Another alternative backend, but not available through Perinci::CmdLine::Any
  since it works by generating script instead: L<Perinci::CmdLine::Inline>
  
  =head1 HOMEPAGE
  
  Please visit the project's homepage at L<https://metacpan.org/release/Perinci-CmdLine-Any>.
  
  =head1 SOURCE
  
  Source repository is at L<https://github.com/perlancar/perl-Perinci-CmdLine-Any>.
  
  =head1 BUGS
  
  Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=Perinci-CmdLine-Any>
  
  When submitting a bug or request, please include a test-file or a
  patch to an existing test-file that illustrates the bug or desired
  feature.
  
  =head1 AUTHOR
  
  perlancar <perlancar@cpan.org>
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2015 by perlancar@cpan.org.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
PERINCI_CMDLINE_ANY

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

#!/home/gugod/perl5/perlbrew/perls/perl-5.22.0/bin/perl

our $DATE = '2015-12-07'; # DATE
our $VERSION = '0.53'; # VERSION

use 5.010;
use strict;
use warnings;

use App::PMUtils;
use Perinci::CmdLine::Any;

our %SPEC;
$SPEC{pmlist} = {
    v => 1.1,
    summary => 'List Perl modules (and PODs, and module prefixes)',
    description => <<'_',

This is basically a CLI interface to `Module::List`, with tab completion.

_
    args => {
        query => {
            schema  => 'str*',
            default => '',
            pos     => 0,
            completion => sub {
                require Complete::Module;
                my %args = @_;
                Complete::Module::complete_module(word=>$args{word});
            },
            tags => ['category:filtering'],
        },
        pm => {
            summary => 'List .pm files',
            schema  => 'bool',
            default => 1,
            tags => ['category:filtering'],
        },
        pod => {
            summary => 'List .pod files',
            schema  => 'bool',
            default => 0,
            tags => ['category:filtering'],
        },
        prefix => {
            summary => 'List prefixes (dirs)',
            schema  => 'bool',
            default => 0,
            tags => ['category:filtering'],
        },
        xs => {
            summary => 'Only list XS modules',
            'summary.alt.bool.neg' => 'Only list PP (pure-perl) modules',
            schema  => 'bool',
            tags => ['category:filtering'],
            cmdline_aliases => {
                pp => {
                    summary => 'Alias for --no-core',
                    is_flag => 1,
                    code => sub { $_[0]{xs} = 0 },
                },
            },
        },
        core => {
            summary => 'Only list core modules',
            'summary.alt.bool.neg' => 'Only list non-core modules',
            schema  => 'bool',
            tags => ['category:filtering'],
        },
        core_dirs => {
            summary => 'Only search in core directories',
            'summary.alt.bool.neg' => 'Only search in non-core directories',
            schema => 'bool',
            tags => ['category:filtering'],
        },
        exclude_curdir => {
            summary => 'Do not include "." in search dir',
            schema => 'bool',
            description => <<'_',

By default, Perl usually adds `.` (the current directory) in the search dir.
This option removes it.

_
            tags => ['category:filtering'],
        },
        recurse => {
            schema  => 'bool',
            cmdline_aliases => { R => {} },
        },
        detail => {
            summary => 'Return detailed records instead of just module names',
            schema  => 'bool',
            cmdline_aliases => { l=>{} },
        },
    },
};
sub pmlist {
    require Module::List;
    my %args = @_;

    require Module::CoreList::More if defined($args{core}) || $args{detail};
    require Module::XSOrPP if defined($args{xs}) || $args{detail};

    my $query = $args{query} // "";
    $query =~ s!/!::!g; # convenience

    # i wonder why Module::List is not more forgiving
    $query .= "::" unless !length($query) || $query =~ /::\z/;

    local @INC = @INC;
    @INC = do {
        no warnings 'once';
        require Config;
        @Config::Config{qw(privlibexp archlibexp)};
    } if $args{core_dirs};
    @INC = grep { $_ ne '.' } @INC if $args{exclude_curdir};

    my $mods = Module::List::list_modules(
        $query,
        {
            list_prefixes => $args{prefix},
            list_modules  => $args{pm},
            list_pod      => $args{pod},
            recurse       => $args{recurse},
        });
    my @res;
  MOD:
    for my $mod (sort keys %$mods) {
        my $is_core;
        if (defined $args{core}) {
            $is_core = Module::CoreList::More->is_core($mod);
            next MOD if $args{core} xor $is_core;
        }
        my $is_xs;
        my $is_xs_calculated;
        if (defined $args{xs}) {
            $is_xs = Module::XSOrPP::is_xs($mod);
            $is_xs_calculated++;
            next MOD if $args{xs} xor $is_xs;
        }

        if ($args{detail}) {
            push @res, {
                module  => $mod,
                is_core => $is_core // Module::CoreList::More->is_core($mod),
                is_xs   => $is_xs_calculated ? $is_xs : Module::XSOrPP::is_xs($mod),
            };
        } else {
            push @res, $mod;
        }
    }
    my $meta = {};
    if ($args{detail}) {
        $meta->{format_options}{any}{table_column_orders} = [
            [qw/module is_core is_xs/],
        ];
    }
    [200, "OK", \@res, $meta];
}

Perinci::CmdLine::Any->new(
    url => '/main/pmlist',
)->run;

# ABSTRACT: List Perl modules (and PODs, and module prefixes)
# PODNAME: pmlist

__END__

=pod

=encoding UTF-8

=head1 NAME

pmlist - List Perl modules (and PODs, and module prefixes)

=head1 VERSION

This document describes version 0.53 of pmlist (from Perl distribution App-PMUtils), released on 2015-12-07.

=head1 SYNOPSIS

Basic usage:

 % pmlist Text::

=head1 DESCRIPTION

This is basically a CLI interface to C<Module::List>, with tab completion.

=head1 OPTIONS

C<*> marks required options.

=head2 Configuration options

=over

=item B<--config-path>=I<filename>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--no-config>

Do not use any configuration file.

=back

=head2 Environment options

=over

=item B<--no-env>

Do not read environment for default options.

=back

=head2 Filtering options

=over

=item B<--core>

Only list core modules.

=item B<--core-dirs>

Only search in core directories.

=item B<--exclude-curdir>

Do not include "." in search dir.

By default, Perl usually adds `.` (the current directory) in the search dir.
This option removes it.


=item B<--no-pm>

=item B<--pod>

List .pod files.

=item B<--pp>

Alias for --no-core.

See C<--xs>.

=item B<--prefix>

List prefixes (dirs).

=item B<--query>=I<s>

Default value:

 ""

=item B<--xs>

Only list XS modules.

=back

=head2 Output options

=over

=item B<--format>=I<s>

Choose output format, e.g. json, text.

Default value:

 undef

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

Default value:

 0

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=back

=head2 Other options

=over

=item B<--detail>, B<-l>

Return detailed records instead of just module names.

=item B<--help>, B<-h>, B<-?>

Display help message and exit.

=item B<--recurse>, B<-R>

=item B<--version>, B<-v>

Display program's version and exit.

=back

=head1 COMPLETION

This script has shell tab completion capability with support for several
shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C pmlist pmlist

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to
activate completion scripts for several kinds of scripts on multiple shells.
Some CPAN distributions (those that are built with
L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell
completion for their included scripts (using C<shcompgen>) at installation time,
so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete pmlist 'p/*/`pmlist`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then
recognize tab completion for the command. Or, you can also directly execute the
line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 ENVIRONMENT

=head2 PMLIST_OPT => str

Specify additional command-line options

=head1 CONFIGURATION FILE

This script can read configuration file, which by default is searched at C<~/.config/pmlist.conf>, C<~/pmlist.conf> or C</etc/pmlist.conf> (can be changed by specifying C<--config-path>). All found files will be read and merged.

To disable searching for configuration files, pass C<--no-config>.

Configuration file is in the format of L<IOD>, which is basically INI with some extra features. 

You can put multiple profiles in a single file by using section names like C<[profile=SOMENAME]>. Those sections will only be read if you specify the matching C<--config-profile SOMENAME>.

List of available configuration parameters:

 core (see --core)
 core_dirs (see --core-dirs)
 detail (see --detail)
 exclude_curdir (see --exclude-curdir)
 format (see --format)
 naked_res (see --naked-res)
 pm (see --no-pm)
 pod (see --pod)
 prefix (see --prefix)
 query (see --query)
 recurse (see --recurse)
 xs (see --xs)

=head1 FILES

~/.config/pmlist.conf

~/pmlist.conf

/etc/pmlist.conf

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-PMUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/sharyanto/perl-App-PMUtils>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-PMUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2015 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
